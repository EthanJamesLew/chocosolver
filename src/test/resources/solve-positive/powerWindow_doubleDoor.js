scope({c0_AnalogWire:10, c0_AnalysisFunction:8, c0_Architecture:2, c0_BCM:2, c0_BCMIsMotorDriver:2, c0_BusTopology:2, c0_CAN:3, c0_CommTopology:2, c0_Command:13, c0_CommunicationImpl:2, c0_CurrentSensor:2, c0_Deployment:2, c0_DeviceNode:10, c0_DeviceNodeTopology:2, c0_DeviceWire:8, c0_DoorInline:2, c0_DoorModule:2, c0_DoorModuleIsMotorDriver:2, c0_EC:2, c0_Feature:6, c0_FeatureModel:2, c0_Flat:2, c0_FlexRay:3, c0_FunctionalAnalysis:2, c0_FunctionalAnalysisComponent:17, c0_FunctionalDevice:9, c0_Grid:2, c0_HardwareToplogy:2, c0_Implementation:2, c0_LIN:3, c0_Latency:26, c0_LatencyRequirement:36, c0_LoadWire:2, c0_LogicalBus:2, c0_LogicalDataConnector:6, c0_LogicalDiscreteWire:4, c0_Motor:2, c0_MotorIsMotorDriver:2, c0_MotorLoadPowerConfig:2, c0_MotorLoadPowerWire:2, c0_PhysicalBus:3, c0_PinchDetection:2, c0_PinchDetectionFA:2, c0_PositionSensor:2, c0_PowerTopology:2, c0_SuperGateway:2, c0_Switch:2, c0_SwitchIsMotorDriver:2, c0_SwitchNode:2, c0_System:2, c0_WinArbiter:2, c0_WinController:2, c0_WinMotor:2, c0_WinMotorDrive:2, c0_WinSwitch:2, c0_WinSysCI:2, c0_WinSysCT:2, c0_WinSysDN:2, c0_WinSysDpl:2, c0_WinSysFA:2, c0_WinSysHT:2, c0_WinSysImpl:2, c0_WinSysPT:2, c0_Wire:16, c0_WireConfigSegment:20, c0_bus:6, c0_ci:2, c0_cost:10, c0_ct:2, c0_current:2, c0_deployedFrom:25, c0_deployedTo:22, c0_discreteWire:6, c0_dn:2, c0_doorBus:2, c0_doorModuleInlineDP:2, c0_doorModuleInlineLP:2, c0_doorModuleMotorLP:2, c0_electronic:10, c0_fa:2, c0_gateway:12, c0_gatewayLatency:10, c0_ht:2, c0_inlineBCMDist:2, c0_inlineBCMLP:2, c0_inlineECDP:2, c0_inlineECDist:2, c0_inlineECLP:2, c0_latency:17, c0_latencyReq:6, c0_length:16, c0_localWinReq:2, c0_logicalDoorBus:2, c0_logicalSwitchMotorDisc:2, c0_mainBus:2, c0_mass:10, c0_minLatency:8, c0_motorInlineDP:2, c0_motorInlineLP:2, c0_numSwitches:2, c0_object:2, c0_position:2, c0_power:10, c0_pt:2, c0_realizedBy:4, c0_realizes:6, c0_receiver:13, c0_reliability:10, c0_replaceCost:10, c0_sender:13, c0_size:13, c0_smart:10, c0_speedFactor:10, c0_switchInlineDP:2, c0_switchInlineLP:2, c0_switchMotorLP:2, c0_totalCost:2, c0_totalMass:2, c0_totalWarrantyCost:2, c0_type:10, c0_warrantyCost:10, c0_winCmd:2, c0_winReq:2, c1_deployedFrom:47, c1_deployedTo:18, c1_gateway:2, c1_ht:2, c1_inlineBCMDist:2, c1_inlineECLP:2, c1_latency:6, c1_latencyReq:17, c1_length:20, c1_mass:16, c1_motorInlineLP:2, c1_totalCost:2, c1_totalMass:2, c1_totalWarrantyCost:2, c1_type:6, c2_inlineECLP:2, c2_latency:3, c2_latencyReq:13, c2_length:3, c2_mass:3, c2_totalCost:2, c2_totalMass:2, c2_totalWarrantyCost:2, c2_type:3, c3_totalMass:2, c4_totalMass:2});
defaultScope(1);
intRange(-8, 3000);
stringLength(16);

c0_System = Abstract("c0_System");
c0_FeatureModel = Abstract("c0_FeatureModel");
c0_Architecture = Abstract("c0_Architecture");
c0_FunctionalAnalysis = Abstract("c0_FunctionalAnalysis");
c0_HardwareToplogy = Abstract("c0_HardwareToplogy");
c0_DeviceNodeTopology = Abstract("c0_DeviceNodeTopology");
c0_CommTopology = Abstract("c0_CommTopology");
c0_PowerTopology = Abstract("c0_PowerTopology");
c0_Deployment = Abstract("c0_Deployment");
c0_Implementation = Abstract("c0_Implementation");
c0_CommunicationImpl = Abstract("c0_CommunicationImpl");
c0_LatencyRequirement = Abstract("c0_LatencyRequirement");
c0_Latency = Abstract("c0_Latency");
c0_Feature = Abstract("c0_Feature");
c0_FunctionalAnalysisComponent = Abstract("c0_FunctionalAnalysisComponent");
c0_Command = Abstract("c0_Command");
c0_DeviceNode = Abstract("c0_DeviceNode");
c0_Wire = Abstract("c0_Wire");
c0_WireConfigSegment = Abstract("c0_WireConfigSegment");
c0_PhysicalBus = Abstract("c0_PhysicalBus");
c0_AnalysisFunction = Abstract("c0_AnalysisFunction").extending(c0_FunctionalAnalysisComponent);
c0_FunctionalDevice = Abstract("c0_FunctionalDevice").extending(c0_FunctionalAnalysisComponent);
c0_AnalogWire = Abstract("c0_AnalogWire").extending(c0_Wire);
c0_LogicalDataConnector = Abstract("c0_LogicalDataConnector").extending(c0_Wire);
c0_WinSysFA = Abstract("c0_WinSysFA").extending(c0_FunctionalAnalysis);
c0_WinSysDN = Abstract("c0_WinSysDN").extending(c0_DeviceNodeTopology);
c0_WinSysPT = Abstract("c0_WinSysPT").extending(c0_PowerTopology);
c0_WinSysCT = Abstract("c0_WinSysCT").extending(c0_CommTopology);
c0_WinSysHT = Abstract("c0_WinSysHT").extending(c0_HardwareToplogy);
c0_WinSysDpl = Abstract("c0_WinSysDpl").extending(c0_Deployment);
c0_SwitchNode = Abstract("c0_SwitchNode").extending(c0_DeviceNode);
c0_WinSysImpl = Abstract("c0_WinSysImpl").extending(c0_Implementation);
c0_WinSysCI = Abstract("c0_WinSysCI").extending(c0_CommunicationImpl);
c0_LoadWire = Abstract("c0_LoadWire").extending(c0_AnalogWire);
c0_DeviceWire = Abstract("c0_DeviceWire").extending(c0_AnalogWire);
c0_LogicalDiscreteWire = Abstract("c0_LogicalDiscreteWire").extending(c0_LogicalDataConnector);
c0_LogicalBus = Abstract("c0_LogicalBus").extending(c0_LogicalDataConnector);
c0_totalMass = c0_System.addChild("c0_totalMass").withCard(1, 1);
c0_totalCost = c0_System.addChild("c0_totalCost").withCard(1, 1);
c0_totalWarrantyCost = c0_System.addChild("c0_totalWarrantyCost").withCard(1, 1);
c1_totalMass = c0_HardwareToplogy.addChild("c1_totalMass").withCard(1, 1);
c1_totalCost = c0_HardwareToplogy.addChild("c1_totalCost").withCard(1, 1);
c1_totalWarrantyCost = c0_HardwareToplogy.addChild("c1_totalWarrantyCost").withCard(1, 1);
c2_totalMass = c0_DeviceNodeTopology.addChild("c2_totalMass").withCard(1, 1);
c2_totalCost = c0_DeviceNodeTopology.addChild("c2_totalCost").withCard(1, 1);
c2_totalWarrantyCost = c0_DeviceNodeTopology.addChild("c2_totalWarrantyCost").withCard(1, 1);
c3_totalMass = c0_CommTopology.addChild("c3_totalMass").withCard(1, 1);
c4_totalMass = c0_PowerTopology.addChild("c4_totalMass").withCard(1, 1);
c0_latencyReq = c0_Feature.addChild("c0_latencyReq").withCard(0, 1).extending(c0_LatencyRequirement);
c0_deployedTo = c0_FunctionalAnalysisComponent.addChild("c0_deployedTo").withCard(1, 1);
c1_latencyReq = c0_FunctionalAnalysisComponent.addChild("c1_latencyReq").withCard(1, 1).extending(c0_LatencyRequirement);
c0_latency = c0_FunctionalAnalysisComponent.addChild("c0_latency").withCard(1, 1).extending(c0_Latency);
c0_minLatency = c0_AnalysisFunction.addChild("c0_minLatency").withCard(1, 1);
c0_sender = c0_Command.addChild("c0_sender").withCard(1, 1);
c0_receiver = c0_Command.addChild("c0_receiver").withCard(1, 1);
c1_deployedTo = c0_Command.addChild("c1_deployedTo").withCard(0, 1);
c2_latencyReq = c0_Command.addChild("c2_latencyReq").withCard(0, 1).extending(c0_LatencyRequirement);
c0_size = c0_Command.addChild("c0_size").withCard(1, 1);
c0_type = c0_DeviceNode.addChild("c0_type").withCard(1, 1).withGroupCard(1, 1);
c0_smart = c0_type.addChild("c0_smart").withCard(0, 1);
c0_speedFactor = c0_smart.addChild("c0_speedFactor").withCard(1, 1);
c0_electronic = c0_type.addChild("c0_electronic").withCard(0, 1);
c0_power = c0_type.addChild("c0_power").withCard(0, 1);
c0_deployedFrom = c0_DeviceNode.addChild("c0_deployedFrom");
c0_mass = c0_DeviceNode.addChild("c0_mass").withCard(1, 1);
c0_cost = c0_DeviceNode.addChild("c0_cost").withCard(1, 1);
c0_reliability = c0_DeviceNode.addChild("c0_reliability").withCard(1, 1);
c0_replaceCost = c0_DeviceNode.addChild("c0_replaceCost").withCard(1, 1);
c0_warrantyCost = c0_DeviceNode.addChild("c0_warrantyCost").withCard(1, 1);
c0_gatewayLatency = c0_DeviceNode.addChild("c0_gatewayLatency").withCard(1, 1);
c0_length = c0_Wire.addChild("c0_length").withCard(1, 1);
c1_mass = c0_Wire.addChild("c1_mass").withCard(1, 1);
c1_length = c0_WireConfigSegment.addChild("c1_length").withCard(1, 1);
c1_deployedFrom = c0_LogicalDataConnector.addChild("c1_deployedFrom").withCard(1);
c1_type = c0_LogicalDataConnector.addChild("c1_type").withCard(1, 1).withGroupCard(1, 1);
c0_discreteWire = c1_type.addChild("c0_discreteWire").withCard(0, 1);
c0_bus = c1_type.addChild("c0_bus").withCard(0, 1);
c1_latency = c0_LogicalDataConnector.addChild("c1_latency").withCard(1, 1).extending(c0_Latency);
c0_realizedBy = c0_LogicalBus.addChild("c0_realizedBy").withCard(1);
c0_gateway = c0_LogicalBus.addChild("c0_gateway");
c2_length = c0_PhysicalBus.addChild("c2_length").withCard(1, 1);
c2_mass = c0_PhysicalBus.addChild("c2_mass").withCard(1, 1);
c2_latency = c0_PhysicalBus.addChild("c2_latency").withCard(1, 1).extending(c0_Latency);
c0_realizes = c0_PhysicalBus.addChild("c0_realizes").withCard(1);
c2_type = c0_PhysicalBus.addChild("c2_type").withCard(1, 1).withGroupCard(1, 1);
c0_CAN = c2_type.addChild("c0_CAN").withCard(0, 1);
c0_LIN = c2_type.addChild("c0_LIN").withCard(0, 1);
c0_FlexRay = c2_type.addChild("c0_FlexRay").withCard(0, 1);
c0_WinSwitch = c0_WinSysFA.addChild("c0_WinSwitch").withCard(1, 1).extending(c0_FunctionalDevice);
c0_WinArbiter = c0_WinSysFA.addChild("c0_WinArbiter").withCard(1, 1).extending(c0_AnalysisFunction);
c0_WinController = c0_WinSysFA.addChild("c0_WinController").withCard(1, 1).extending(c0_AnalysisFunction);
c0_WinMotorDrive = c0_WinSysFA.addChild("c0_WinMotorDrive").withCard(1, 1).extending(c0_AnalysisFunction);
c0_WinMotor = c0_WinSysFA.addChild("c0_WinMotor").withCard(1, 1).extending(c0_FunctionalDevice);
c0_CurrentSensor = c0_WinSysFA.addChild("c0_CurrentSensor").withCard(1, 1).extending(c0_FunctionalDevice);
c0_localWinReq = c0_WinSysFA.addChild("c0_localWinReq").withCard(1, 1).extending(c0_Command);
c0_winReq = c0_WinSysFA.addChild("c0_winReq").withCard(1, 1).extending(c0_Command);
c0_winCmd = c0_WinSysFA.addChild("c0_winCmd").withCard(1, 1).extending(c0_Command);
c0_current = c0_WinSysFA.addChild("c0_current").withCard(1, 1).extending(c0_Command);
c0_PinchDetectionFA = c0_WinSysFA.addChild("c0_PinchDetectionFA").withCard(0, 1);
c0_PinchDetection = c0_PinchDetectionFA.addChild("c0_PinchDetection").withCard(1, 1).extending(c0_AnalysisFunction);
c0_PositionSensor = c0_PinchDetectionFA.addChild("c0_PositionSensor").withCard(1, 1).extending(c0_FunctionalDevice);
c0_object = c0_PinchDetectionFA.addChild("c0_object").withCard(1, 1).extending(c0_Command);
c0_position = c0_PinchDetectionFA.addChild("c0_position").withCard(1, 1).extending(c0_Command);
c0_BCM = c0_WinSysDN.addChild("c0_BCM").withCard(1, 1);
c0_EC = c0_WinSysDN.addChild("c0_EC").withCard(1, 1);
c0_Switch = c0_WinSysDN.addChild("c0_Switch").withCard(1, 1).extending(c0_SwitchNode);
c0_Motor = c0_WinSysDN.addChild("c0_Motor").withCard(1, 1).extending(c0_DeviceNode);
c0_DoorInline = c0_WinSysDN.addChild("c0_DoorInline").withCard(1, 1).extending(c0_DeviceNode);
c0_DoorModule = c0_WinSysDN.addChild("c0_DoorModule").withCard(1, 1).extending(c0_DeviceNode);
c0_inlineECDist = c0_WinSysPT.addChild("c0_inlineECDist").withCard(1, 1);
c0_inlineBCMDist = c0_WinSysPT.addChild("c0_inlineBCMDist").withCard(1, 1);
c0_MotorLoadPowerWire = c0_WinSysPT.addChild("c0_MotorLoadPowerWire").withCard(1, 1).extending(c0_LoadWire);
c0_MotorLoadPowerConfig = c0_WinSysPT.addChild("c0_MotorLoadPowerConfig").withCard(1, 1).withGroupCard(1, 1);
c0_SwitchIsMotorDriver = c0_MotorLoadPowerConfig.addChild("c0_SwitchIsMotorDriver").withCard(0, 1);
c0_switchMotorLP = c0_SwitchIsMotorDriver.addChild("c0_switchMotorLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_switchInlineLP = c0_SwitchIsMotorDriver.addChild("c0_switchInlineLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_inlineECLP = c0_SwitchIsMotorDriver.addChild("c0_inlineECLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_DoorModuleIsMotorDriver = c0_MotorLoadPowerConfig.addChild("c0_DoorModuleIsMotorDriver").withCard(0, 1);
c0_doorModuleMotorLP = c0_DoorModuleIsMotorDriver.addChild("c0_doorModuleMotorLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_doorModuleInlineLP = c0_DoorModuleIsMotorDriver.addChild("c0_doorModuleInlineLP").withCard(1, 1).extending(c0_WireConfigSegment);
c1_inlineECLP = c0_DoorModuleIsMotorDriver.addChild("c1_inlineECLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_BCMIsMotorDriver = c0_MotorLoadPowerConfig.addChild("c0_BCMIsMotorDriver").withCard(0, 1);
c0_motorInlineLP = c0_BCMIsMotorDriver.addChild("c0_motorInlineLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_inlineBCMLP = c0_BCMIsMotorDriver.addChild("c0_inlineBCMLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_MotorIsMotorDriver = c0_MotorLoadPowerConfig.addChild("c0_MotorIsMotorDriver").withCard(0, 1);
c1_motorInlineLP = c0_MotorIsMotorDriver.addChild("c1_motorInlineLP").withCard(1, 1).extending(c0_WireConfigSegment);
c2_inlineECLP = c0_MotorIsMotorDriver.addChild("c2_inlineECLP").withCard(1, 1).extending(c0_WireConfigSegment);
c0_switchInlineDP = c0_WinSysPT.addChild("c0_switchInlineDP").withCard(0, 1).extending(c0_DeviceWire);
c0_motorInlineDP = c0_WinSysPT.addChild("c0_motorInlineDP").withCard(0, 1).extending(c0_DeviceWire);
c0_doorModuleInlineDP = c0_WinSysPT.addChild("c0_doorModuleInlineDP").withCard(1, 1).extending(c0_DeviceWire);
c0_inlineECDP = c0_WinSysPT.addChild("c0_inlineECDP").withCard(0, 1).extending(c0_DeviceWire);
c0_logicalDoorBus = c0_WinSysCT.addChild("c0_logicalDoorBus").withCard(0, 1).extending(c0_LogicalBus);
c0_logicalSwitchMotorDisc = c0_WinSysCT.addChild("c0_logicalSwitchMotorDisc").withCard(0, 1).extending(c0_LogicalDiscreteWire);
c0_dn = c0_WinSysHT.addChild("c0_dn").withCard(1, 1);
c0_pt = c0_WinSysHT.addChild("c0_pt").withCard(1, 1);
c0_ct = c0_WinSysHT.addChild("c0_ct").withCard(1, 1);
c0_fa = c0_WinSysDpl.addChild("c0_fa").withCard(1, 1);
c0_ht = c0_WinSysDpl.addChild("c0_ht").withCard(1, 1);
c0_numSwitches = c0_SwitchNode.addChild("c0_numSwitches").withCard(1, 1);
c0_ci = c0_WinSysImpl.addChild("c0_ci").withCard(1, 1);
c1_ht = c0_WinSysCI.addChild("c1_ht").withCard(1, 1);
c0_mainBus = c0_WinSysCI.addChild("c0_mainBus").withCard(0, 1);
c0_doorBus = c0_WinSysCI.addChild("c0_doorBus").withCard(0, 1).extending(c0_PhysicalBus);
c1_gateway = c0_WinSysCI.addChild("c1_gateway").withCard(0, 1);
c1_inlineBCMDist = c0_WinSysCI.addChild("c1_inlineBCMDist").withCard(1, 1);
c0_BusTopology = c0_WinSysCI.addChild("c0_BusTopology").withCard(1, 1).withGroupCard(1, 1);
c0_Flat = c0_BusTopology.addChild("c0_Flat").withCard(0, 1);
c0_SuperGateway = c0_BusTopology.addChild("c0_SuperGateway").withCard(0, 1);
c0_Grid = c0_BusTopology.addChild("c0_Grid").withCard(0, 1);
c0_DriverWinSys = Clafer("c0_DriverWinSys").withCard(1, 1).extending(c0_System);
c0_DWinSysFM = c0_DriverWinSys.addChild("c0_DWinSysFM").withCard(1, 1).extending(c0_FeatureModel);
c0_manualUpDown = c0_DWinSysFM.addChild("c0_manualUpDown").withCard(1, 1).extending(c0_Feature);
c0_express = c0_DWinSysFM.addChild("c0_express").withCard(0, 1).extending(c0_Feature);
c0_expressUp = c0_express.addChild("c0_expressUp").withCard(0, 1).extending(c0_Feature);
c0_DWinSysArch = c0_DriverWinSys.addChild("c0_DWinSysArch").withCard(1, 1).extending(c0_Architecture);
c0_DWinSysFA = c0_DWinSysArch.addChild("c0_DWinSysFA").withCard(1, 1).extending(c0_WinSysFA);
c0_DWinSysHT = c0_DWinSysArch.addChild("c0_DWinSysHT").withCard(1, 1).extending(c0_WinSysHT);
c0_DWinSysDN = c0_DWinSysHT.addChild("c0_DWinSysDN").withCard(1, 1).extending(c0_WinSysDN);
c0_DWinSysPT = c0_DWinSysHT.addChild("c0_DWinSysPT").withCard(1, 1).extending(c0_WinSysPT);
c0_DWinSysCT = c0_DWinSysHT.addChild("c0_DWinSysCT").withCard(1, 1).extending(c0_WinSysCT);
c0_DWinSysDpl = c0_DWinSysArch.addChild("c0_DWinSysDpl").withCard(1, 1).extending(c0_WinSysDpl);
c0_DWinSysImpl = c0_DWinSysArch.addChild("c0_DWinSysImpl").withCard(1, 1).extending(c0_WinSysImpl);
c0_DWinSysCI = c0_DWinSysImpl.addChild("c0_DWinSysCI").withCard(1, 1).extending(c0_WinSysCI);
c0_PassengerWinSys = Clafer("c0_PassengerWinSys").withCard(1, 1).extending(c0_System);
c0_PWinSysFM = c0_PassengerWinSys.addChild("c0_PWinSysFM").withCard(1, 1).extending(c0_FeatureModel);
c1_manualUpDown = c0_PWinSysFM.addChild("c1_manualUpDown").withCard(1, 1).extending(c0_Feature);
c1_express = c0_PWinSysFM.addChild("c1_express").withCard(0, 1).extending(c0_Feature);
c1_expressUp = c1_express.addChild("c1_expressUp").withCard(0, 1).extending(c0_Feature);
c0_PWinSysArch = c0_PassengerWinSys.addChild("c0_PWinSysArch").withCard(1, 1).extending(c0_Architecture);
c0_PWinSysFA = c0_PWinSysArch.addChild("c0_PWinSysFA").withCard(1, 1).extending(c0_WinSysFA);
c0_DWinSwitch = c0_PWinSysFA.addChild("c0_DWinSwitch").withCard(1, 1).extending(c0_FunctionalDevice);
c0_dWinReq = c0_PWinSysFA.addChild("c0_dWinReq").withCard(1, 1).extending(c0_Command);
c0_PWinSysHT = c0_PWinSysArch.addChild("c0_PWinSysHT").withCard(1, 1).extending(c0_WinSysHT);
c0_PWinSysDN = c0_PWinSysHT.addChild("c0_PWinSysDN").withCard(1, 1).extending(c0_WinSysDN);
c0_DSwitch = c0_PWinSysDN.addChild("c0_DSwitch").withCard(1, 1);
c0_PWinSysPT = c0_PWinSysHT.addChild("c0_PWinSysPT").withCard(1, 1).extending(c0_WinSysPT);
c0_PWinSysCT = c0_PWinSysHT.addChild("c0_PWinSysCT").withCard(1, 1).extending(c0_WinSysCT);
c0_logicalDriveSwitchPassSwitch = c0_PWinSysCT.addChild("c0_logicalDriveSwitchPassSwitch").withCard(0, 1).extending(c0_LogicalDiscreteWire);
c0_logicalDriveSwitchPassMotor = c0_PWinSysCT.addChild("c0_logicalDriveSwitchPassMotor").withCard(0, 1).extending(c0_LogicalDiscreteWire);
c0_PWinSysDpl = c0_PWinSysArch.addChild("c0_PWinSysDpl").withCard(1, 1).extending(c0_WinSysDpl);
c0_PWinSysImpl = c0_PWinSysArch.addChild("c0_PWinSysImpl").withCard(1, 1).extending(c0_WinSysImpl);
c0_PWinSysCI = c0_PWinSysImpl.addChild("c0_PWinSysCI").withCard(1, 1).extending(c0_WinSysCI);
c0_Car = Clafer("c0_Car").withCard(1, 1);
c1_BCM = c0_Car.addChild("c1_BCM").withCard(1, 1).extending(c0_DeviceNode);
c1_EC = c0_Car.addChild("c1_EC").withCard(1, 1).extending(c0_DeviceNode);
c0_MainBus = c0_Car.addChild("c0_MainBus").withCard(0, 1).extending(c0_PhysicalBus);
c0_CommunicationTopology = c0_Car.addChild("c0_CommunicationTopology").withCard(1, 1).withGroupCard(1, 1);
c1_Flat = c0_CommunicationTopology.addChild("c1_Flat").withCard(0, 1);
c1_Grid = c0_CommunicationTopology.addChild("c1_Grid").withCard(0, 1);
c1_SuperGateway = c0_CommunicationTopology.addChild("c1_SuperGateway").withCard(0, 1);
c0_totalCarMass = Clafer("c0_totalCarMass").withCard(1, 1);
c0_totalCarCost = Clafer("c0_totalCarCost").withCard(1, 1);
c0_totalCarWarrantyCost = Clafer("c0_totalCarWarrantyCost").withCard(1, 1);
c0_BasicOpLatency = Clafer("c0_BasicOpLatency").withCard(0, 1);
c0_ExpressUpLatency = Clafer("c0_ExpressUpLatency").withCard(0, 1);
c0_totalMass.refTo(Int);
c0_totalCost.refTo(Int);
c0_totalWarrantyCost.refTo(Int);
c1_totalMass.refTo(Int);
c1_totalCost.refTo(Int);
c1_totalWarrantyCost.refTo(Int);
c2_totalMass.refTo(Int);
c2_totalCost.refTo(Int);
c2_totalWarrantyCost.refTo(Int);
c3_totalMass.refTo(Int);
c4_totalMass.refTo(Int);
c0_LatencyRequirement.refTo(Int);
c0_Latency.refTo(Int);
c0_deployedTo.refTo(c0_DeviceNode);
c0_minLatency.refTo(Int);
c0_sender.refTo(c0_FunctionalAnalysisComponent);
c0_receiver.refTo(c0_FunctionalAnalysisComponent);
c1_deployedTo.refTo(c0_LogicalDataConnector);
c0_size.refTo(Int);
c0_speedFactor.refTo(Int);
c0_deployedFrom.refToUnique(c0_FunctionalAnalysisComponent);
c0_mass.refTo(Int);
c0_cost.refTo(Int);
c0_reliability.refTo(Int);
c0_replaceCost.refTo(Int);
c0_warrantyCost.refTo(Int);
c0_gatewayLatency.refTo(Int);
c0_length.refTo(Int);
c1_mass.refTo(Int);
c1_length.refTo(Int);
c1_deployedFrom.refToUnique(c0_Command);
c0_realizedBy.refToUnique(c0_PhysicalBus);
c0_gateway.refToUnique(c0_DeviceNode);
c2_length.refTo(Int);
c2_mass.refTo(Int);
c0_realizes.refToUnique(c0_LogicalBus);
c0_BCM.refTo(c0_DeviceNode);
c0_EC.refTo(c0_DeviceNode);
c0_inlineECDist.refTo(Int);
c0_inlineBCMDist.refTo(Int);
c0_dn.refTo(c0_WinSysDN);
c0_pt.refTo(c0_WinSysPT);
c0_ct.refTo(c0_WinSysCT);
c0_fa.refTo(c0_WinSysFA);
c0_ht.refTo(c0_WinSysHT);
c0_numSwitches.refTo(Int);
c0_ci.refTo(c0_WinSysCI);
c1_ht.refTo(c0_WinSysHT);
c0_mainBus.refTo(c0_PhysicalBus);
c1_gateway.refTo(c0_DeviceNode);
c1_inlineBCMDist.refTo(Int);
c0_DSwitch.refTo(c0_SwitchNode);
c0_totalCarMass.refTo(Int);
c0_totalCarCost.refTo(Int);
c0_totalCarWarrantyCost.refTo(Int);
c0_BasicOpLatency.refTo(Int);
c0_ExpressUpLatency.refTo(Int);
Constraint(implies(some(global(c0_totalCarMass)), equal(joinRef(global(c0_totalCarMass)), add(add(add(joinRef(join(global(c0_DriverWinSys), c0_totalMass)), joinRef(join(global(c0_PassengerWinSys), c0_totalMass))), joinRef(join(join(global(c0_Car), c1_EC), c0_mass))), joinRef(join(join(global(c0_Car), c1_BCM), c0_mass))))));
Constraint(implies(some(global(c0_totalCarCost)), equal(joinRef(global(c0_totalCarCost)), add(add(add(joinRef(join(global(c0_DriverWinSys), c0_totalCost)), joinRef(join(global(c0_PassengerWinSys), c0_totalCost))), joinRef(join(join(global(c0_Car), c1_BCM), c0_cost))), joinRef(join(join(global(c0_Car), c1_EC), c0_cost))))));
Constraint(implies(some(global(c0_totalCarWarrantyCost)), equal(joinRef(global(c0_totalCarWarrantyCost)), add(add(add(joinRef(join(global(c0_DriverWinSys), c0_totalWarrantyCost)), joinRef(join(global(c0_PassengerWinSys), c0_totalWarrantyCost))), joinRef(join(join(global(c0_Car), c1_BCM), c0_warrantyCost))), joinRef(join(join(global(c0_Car), c1_EC), c0_warrantyCost))))));
Constraint(equal(joinRef(global(c0_ExpressUpLatency)), constant(50)));
Constraint(equal(joinRef(global(c0_BasicOpLatency)), constant(100)));
c0_LatencyRequirement.addConstraint(greaterThanEqual(joinRef($this()), constant(0)));
c0_Latency.addConstraint(greaterThanEqual(joinRef($this()), constant(0)));
c0_FunctionalAnalysisComponent.addConstraint(equal(joinRef(join($this(), c1_latencyReq)), joinRef(join($this(), c0_latency))));
c0_deployedTo.addConstraint($in(joinParent($this()), joinRef(join(joinRef($this()), c0_deployedFrom))));
c0_AnalysisFunction.addConstraint(some(join(join(joinRef(join($this(), c0_deployedTo)), c0_type), c0_smart)));
c0_AnalysisFunction.addConstraint(equal(joinRef(join($this(), c0_latency)), mul(joinRef(join($this(), c0_minLatency)), joinRef(join(join(join(joinRef(join($this(), c0_deployedTo)), c0_type), c0_smart), c0_speedFactor)))));
c0_FunctionalDevice.addConstraint(none(join(join(joinRef(join($this(), c0_deployedTo)), c0_type), c0_power)));
c0_Command.addConstraint(ifOnlyIf(equal(joinRef(join(joinRef(join($this(), c0_sender)), c0_deployedTo)), joinRef(join(joinRef(join($this(), c0_receiver)), c0_deployedTo))), none(join($this(), c1_deployedTo))));
c0_Command.addConstraint(equal(joinRef(join($this(), c2_latencyReq)), mul(joinRef(join($this(), c0_size)), joinRef(join(joinRef(join($this(), c1_deployedTo)), c1_latency)))));
c1_deployedTo.addConstraint($in(joinParent($this()), joinRef(join(joinRef($this()), c1_deployedFrom))));
c1_deployedTo.addConstraint(ifOnlyIf(and(some(join(join(joinRef(join(joinRef(join(joinParent($this()), c0_sender)), c0_deployedTo)), c0_type), c0_smart)), some(join(join(joinRef(join(joinRef(join(joinParent($this()), c0_receiver)), c0_deployedTo)), c0_type), c0_smart))), some(join(join(joinRef($this()), c1_type), c0_bus))));
c0_DeviceNode.addConstraint(implies(some(join($this(), c0_warrantyCost)), equal(joinRef(join($this(), c0_warrantyCost)), mul(joinRef(join($this(), c0_reliability)), joinRef(join($this(), c0_replaceCost))))));
c0_electronic.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c0_gatewayLatency)), constant(0)));
c0_power.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c0_gatewayLatency)), constant(0)));
c0_deployedFrom.addConstraint(equal(joinRef(join(joinRef($this()), c0_deployedTo)), joinParent($this())));
c0_LoadWire.addConstraint(equal(joinRef(join($this(), c1_mass)), mul(constant(4), joinRef(join($this(), c0_length)))));
c0_DeviceWire.addConstraint(equal(joinRef(join($this(), c1_mass)), joinRef(join($this(), c0_length))));
c1_deployedFrom.addConstraint(equal(joinRef(join(joinRef($this()), c1_deployedTo)), joinParent($this())));
c0_LogicalDiscreteWire.addConstraint(some(join(join($this(), c1_type), c0_discreteWire)));
c0_LogicalDiscreteWire.addConstraint(equal(joinRef(join($this(), c1_mass)), mul(joinRef(join($this(), c0_length)), card(join($this(), c1_deployedFrom)))));
c0_LogicalDiscreteWire.addConstraint(equal(joinRef(join($this(), c1_latency)), constant(0)));
c0_LogicalBus.addConstraint(some(join(join($this(), c1_type), c0_bus)));
c0_LogicalBus.addConstraint(equal(joinRef(join($this(), c1_latency)), add(sum(join(joinRef(join($this(), c0_realizedBy)), c2_latency)), sum(join(joinRef(join($this(), c0_gateway)), c0_gatewayLatency)))));
c0_LogicalBus.addConstraint(equal(joinRef(join($this(), c0_length)), sum(join(joinRef(join($this(), c0_realizedBy)), c2_length))));
c0_LogicalBus.addConstraint(equal(joinRef(join($this(), c1_mass)), sum(join(joinRef(join($this(), c0_realizedBy)), c2_mass))));
c0_realizedBy.addConstraint($in(joinParent($this()), joinRef(join(joinRef($this()), c0_realizes))));
c0_realizes.addConstraint($in(joinParent($this()), joinRef(join(joinRef($this()), c0_realizedBy))));
c0_CAN.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c2_latency)), constant(2)));
c0_CAN.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c2_mass)), joinRef(join(joinParent(joinParent($this())), c2_length))));
c0_LIN.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c2_latency)), constant(10)));
c0_LIN.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c2_mass)), joinRef(join(joinParent(joinParent($this())), c2_length))));
c0_FlexRay.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c2_latency)), constant(10)));
c0_FlexRay.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c2_mass)), joinRef(join(joinParent(joinParent($this())), c2_length))));
c0_WinSwitch.addConstraint(equal(joinRef(join($this(), c0_latency)), constant(20)));
c0_WinArbiter.addConstraint(equal(joinRef(join($this(), c0_minLatency)), constant(1)));
c0_WinController.addConstraint(equal(joinRef(join($this(), c0_minLatency)), constant(4)));
c0_WinMotorDrive.addConstraint(equal(joinRef(join($this(), c0_minLatency)), constant(3)));
c0_WinMotor.addConstraint(equal(joinRef(join($this(), c0_latency)), constant(10)));
c0_CurrentSensor.addConstraint(equal(joinRef(join($this(), c0_latency)), constant(5)));
c0_localWinReq.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_WinSwitch)), equal(joinRef(join($this(), c0_receiver)), join(joinParent($this()), c0_WinArbiter))));
c0_localWinReq.addConstraint(equal(joinRef(join($this(), c0_size)), constant(1)));
c0_winReq.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_WinArbiter)), equal(joinRef(join($this(), c0_receiver)), join(joinParent($this()), c0_WinController))));
c0_winReq.addConstraint(equal(joinRef(join($this(), c0_size)), constant(2)));
c0_winCmd.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_WinController)), equal(joinRef(join($this(), c0_receiver)), join(joinParent($this()), c0_WinMotorDrive))));
c0_winCmd.addConstraint(equal(joinRef(join($this(), c0_size)), constant(3)));
c0_current.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_CurrentSensor)), equal(joinRef(join($this(), c0_receiver)), join(joinParent($this()), c0_WinController))));
c0_current.addConstraint(equal(joinRef(join($this(), c0_size)), constant(1)));
c0_PinchDetection.addConstraint(equal(joinRef(join($this(), c0_minLatency)), constant(4)));
c0_PositionSensor.addConstraint(equal(joinRef(join($this(), c0_latency)), constant(10)));
c0_object.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_PinchDetection)), equal(joinRef(join($this(), c0_receiver)), join(joinParent(joinParent($this())), c0_WinController))));
c0_object.addConstraint(equal(joinRef(join($this(), c0_size)), constant(3)));
c0_position.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_PositionSensor)), equal(joinRef(join($this(), c0_receiver)), join(joinParent($this()), c0_PinchDetection))));
c0_position.addConstraint(equal(joinRef(join($this(), c0_size)), constant(2)));
c0_Switch.addConstraint(none(join(join($this(), c0_type), c0_power)));
c0_Switch.addConstraint(equal(joinRef(join($this(), c0_mass)), constant(6)));
c0_Switch.addConstraint(equal(joinRef(join($this(), c0_cost)), constant(11)));
c0_Switch.addConstraint(equal(joinRef(join($this(), c0_replaceCost)), constant(11)));
c0_Switch.addConstraint(ifThenElse(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join($this(), c0_reliability)), constant(2)), equal(joinRef(join($this(), c0_reliability)), constant(10))));
c0_Switch.addConstraint(implies(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join($this(), c0_gatewayLatency)), constant(2))));
c0_Switch.addConstraint(implies(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join(join(join($this(), c0_type), c0_smart), c0_speedFactor)), constant(5))));
c0_Motor.addConstraint(none(join(join($this(), c0_type), c0_power)));
c0_Motor.addConstraint(equal(joinRef(join($this(), c0_mass)), constant(16)));
c0_Motor.addConstraint(ifThenElse(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join($this(), c0_cost)), constant(10)), equal(joinRef(join($this(), c0_cost)), constant(12))));
c0_Motor.addConstraint(ifThenElse(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join($this(), c0_reliability)), constant(2)), equal(joinRef(join($this(), c0_reliability)), constant(5))));
c0_Motor.addConstraint(ifThenElse(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join($this(), c0_replaceCost)), constant(10)), equal(joinRef(join($this(), c0_replaceCost)), constant(12))));
c0_Motor.addConstraint(implies(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join($this(), c0_gatewayLatency)), constant(2))));
c0_Motor.addConstraint(implies(some(join(join($this(), c0_type), c0_smart)), equal(joinRef(join(join(join($this(), c0_type), c0_smart), c0_speedFactor)), constant(5))));
c0_DoorInline.addConstraint(some(join(join($this(), c0_type), c0_power)));
c0_DoorInline.addConstraint(equal(joinRef(join($this(), c0_mass)), constant(10)));
c0_DoorInline.addConstraint(equal(joinRef(join($this(), c0_cost)), constant(4)));
c0_DoorInline.addConstraint(equal(joinRef(join($this(), c0_reliability)), constant(10)));
c0_DoorInline.addConstraint(equal(joinRef(join($this(), c0_replaceCost)), constant(2)));
c0_DoorModule.addConstraint(some(join(join($this(), c0_type), c0_smart)));
c0_DoorModule.addConstraint(equal(joinRef(join($this(), c0_mass)), constant(13)));
c0_DoorModule.addConstraint(equal(joinRef(join($this(), c0_cost)), constant(30)));
c0_DoorModule.addConstraint(equal(joinRef(join($this(), c0_reliability)), constant(2)));
c0_DoorModule.addConstraint(equal(joinRef(join($this(), c0_replaceCost)), constant(30)));
c0_DoorModule.addConstraint(equal(joinRef(join($this(), c0_gatewayLatency)), constant(2)));
c0_DoorModule.addConstraint(equal(joinRef(join(join(join($this(), c0_type), c0_smart), c0_speedFactor)), constant(5)));
c0_SwitchIsMotorDriver.addConstraint(equal(joinRef(join(join(joinParent(joinParent($this())), c0_MotorLoadPowerWire), c0_length)), add(add(joinRef(join(join($this(), c0_switchMotorLP), c1_length)), joinRef(join(join($this(), c0_switchInlineLP), c1_length))), joinRef(join(join($this(), c0_inlineECLP), c1_length)))));
c0_switchMotorLP.addConstraint(equal(joinRef(join($this(), c1_length)), constant(40)));
c0_switchInlineLP.addConstraint(equal(joinRef(join($this(), c1_length)), constant(45)));
c0_inlineECLP.addConstraint(equal(joinRef(join($this(), c1_length)), joinRef(join(joinParent(joinParent(joinParent($this()))), c0_inlineECDist))));
c0_DoorModuleIsMotorDriver.addConstraint(equal(joinRef(join(join(joinParent(joinParent($this())), c0_MotorLoadPowerWire), c0_length)), add(add(joinRef(join(join($this(), c0_doorModuleMotorLP), c1_length)), joinRef(join(join($this(), c0_doorModuleInlineLP), c1_length))), joinRef(join(join($this(), c1_inlineECLP), c1_length)))));
c0_doorModuleMotorLP.addConstraint(equal(joinRef(join($this(), c1_length)), constant(30)));
c0_doorModuleInlineLP.addConstraint(equal(joinRef(join($this(), c1_length)), constant(35)));
c1_inlineECLP.addConstraint(equal(joinRef(join($this(), c1_length)), joinRef(join(joinParent(joinParent(joinParent($this()))), c0_inlineECDist))));
c0_BCMIsMotorDriver.addConstraint(equal(joinRef(join(join(joinParent(joinParent($this())), c0_MotorLoadPowerWire), c0_length)), add(joinRef(join(join($this(), c0_motorInlineLP), c1_length)), joinRef(join(join($this(), c0_inlineBCMLP), c1_length)))));
c0_motorInlineLP.addConstraint(equal(joinRef(join($this(), c1_length)), constant(45)));
c0_inlineBCMLP.addConstraint(equal(joinRef(join($this(), c1_length)), joinRef(join(joinParent(joinParent(joinParent($this()))), c0_inlineBCMDist))));
c0_MotorIsMotorDriver.addConstraint(equal(joinRef(join(join(joinParent(joinParent($this())), c0_MotorLoadPowerWire), c0_length)), add(joinRef(join(join($this(), c1_motorInlineLP), c1_length)), joinRef(join(join($this(), c2_inlineECLP), c1_length)))));
c1_motorInlineLP.addConstraint(equal(joinRef(join($this(), c1_length)), constant(45)));
c2_inlineECLP.addConstraint(equal(joinRef(join($this(), c1_length)), joinRef(join(joinParent(joinParent(joinParent($this()))), c0_inlineECDist))));
c0_switchInlineDP.addConstraint(equal(joinRef(join($this(), c0_length)), constant(45)));
c0_motorInlineDP.addConstraint(equal(joinRef(join($this(), c0_length)), constant(45)));
c0_doorModuleInlineDP.addConstraint(equal(joinRef(join($this(), c0_length)), constant(35)));
c0_inlineECDP.addConstraint(equal(joinRef(join($this(), c0_length)), joinRef(join(joinParent($this()), c0_inlineECDist))));
c0_logicalSwitchMotorDisc.addConstraint(equal(joinRef(join($this(), c0_length)), constant(40)));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinArbiter), c0_deployedTo)), union(union(union(joinRef(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_BCM)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_DoorModule))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinController), c0_deployedTo)), union(union(union(joinRef(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_BCM)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_DoorModule))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotorDrive), c0_deployedTo)), union(union(union(joinRef(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_BCM)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_DoorModule))));
c0_WinSysDpl.addConstraint(implies(some(join(joinRef(join($this(), c0_fa)), c0_PinchDetectionFA)), $in(joinRef(join(join(join(joinRef(join($this(), c0_fa)), c0_PinchDetectionFA), c0_PinchDetection), c0_deployedTo)), union(union(union(joinRef(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_BCM)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_DoorModule)))));
c0_WinSysDpl.addConstraint(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinSwitch), c0_deployedTo)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch)));
c0_WinSysDpl.addConstraint(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotor), c0_deployedTo)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor)));
c0_WinSysDpl.addConstraint(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_CurrentSensor), c0_deployedTo)), joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotorDrive), c0_deployedTo))));
c0_WinSysDpl.addConstraint(implies(some(join(joinRef(join($this(), c0_fa)), c0_PinchDetectionFA)), equal(joinRef(join(join(join(joinRef(join($this(), c0_fa)), c0_PinchDetectionFA), c0_PositionSensor), c0_deployedTo)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor))));
c0_WinSysDpl.addConstraint(ifOnlyIf(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotorDrive), c0_deployedTo)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch)), some(join(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_MotorLoadPowerConfig), c0_SwitchIsMotorDriver))));
c0_WinSysDpl.addConstraint(ifOnlyIf(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotorDrive), c0_deployedTo)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor)), some(join(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_MotorLoadPowerConfig), c0_MotorIsMotorDriver))));
c0_WinSysDpl.addConstraint(ifOnlyIf(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotorDrive), c0_deployedTo)), joinRef(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_BCM))), some(join(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_MotorLoadPowerConfig), c0_BCMIsMotorDriver))));
c0_WinSysDpl.addConstraint(ifOnlyIf(equal(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_WinMotorDrive), c0_deployedTo)), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_DoorModule)), some(join(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_MotorLoadPowerConfig), c0_DoorModuleIsMotorDriver))));
c0_WinSysDpl.addConstraint(ifOnlyIf(some(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_switchInlineDP)), some(join(join(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Switch), c0_type), c0_smart))));
c0_WinSysDpl.addConstraint(ifOnlyIf(some(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_motorInlineDP)), some(join(join(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_dn)), c0_Motor), c0_type), c0_smart))));
c0_WinSysDpl.addConstraint(ifOnlyIf(some(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_inlineECDP)), or(some(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_motorInlineDP)), some(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_pt)), c0_switchInlineDP)))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_localWinReq), c1_deployedTo)), union(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalDoorBus), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalSwitchMotorDisc))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_winReq), c1_deployedTo)), union(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalDoorBus), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalSwitchMotorDisc))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_winCmd), c1_deployedTo)), union(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalDoorBus), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalSwitchMotorDisc))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(joinRef(join($this(), c0_fa)), c0_current), c1_deployedTo)), union(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalDoorBus), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalSwitchMotorDisc))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(join(joinRef(join($this(), c0_fa)), c0_PinchDetectionFA), c0_object), c1_deployedTo)), union(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalDoorBus), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalSwitchMotorDisc))));
c0_WinSysDpl.addConstraint($in(joinRef(join(join(join(joinRef(join($this(), c0_fa)), c0_PinchDetectionFA), c0_position), c1_deployedTo)), union(join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalDoorBus), join(joinRef(join(joinRef(join($this(), c0_ht)), c0_ct)), c0_logicalSwitchMotorDisc))));
c1_gateway.addConstraint(some(join(join(joinRef($this()), c0_type), c0_smart)));
c0_Flat.addConstraint(implies(some(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus)), some(join(joinParent(joinParent($this())), c0_mainBus))));
c0_Flat.addConstraint(implies(some(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus)), equal(joinRef(join(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus), c0_realizedBy)), joinRef(join(joinParent(joinParent($this())), c0_mainBus)))));
c0_Flat.addConstraint(none(join(joinParent(joinParent($this())), c1_gateway)));
c0_Flat.addConstraint(none(join(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus), c0_gateway)));
c0_Flat.addConstraint(none(join(joinParent(joinParent($this())), c0_doorBus)));
c0_SuperGateway.addConstraint(implies(some(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus)), some(join(joinParent(joinParent($this())), c0_doorBus))));
c0_SuperGateway.addConstraint(implies(some(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus)), equal(joinRef(join(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus), c0_realizedBy)), join(joinParent(joinParent($this())), c0_doorBus))));
c0_SuperGateway.addConstraint(equal(joinRef(join(joinParent(joinParent($this())), c1_gateway)), joinRef(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_dn)), c0_BCM))));
c0_SuperGateway.addConstraint(equal(joinRef(join(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus), c0_gateway)), joinRef(join(joinParent(joinParent($this())), c1_gateway))));
c0_SuperGateway.addConstraint(implies(some(join(joinParent(joinParent($this())), c0_doorBus)), equal(joinRef(join(join(joinParent(joinParent($this())), c0_doorBus), c2_length)), add(constant(70), joinRef(join(joinParent(joinParent($this())), c1_inlineBCMDist))))));
c0_Grid.addConstraint(implies(some(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus)), and(some(join(joinParent(joinParent($this())), c0_mainBus)), some(join(joinParent(joinParent($this())), c0_doorBus)))));
c0_Grid.addConstraint(implies(some(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus)), equal(joinRef(join(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus), c0_realizedBy)), union(join(joinParent(joinParent($this())), c0_doorBus), joinRef(join(joinParent(joinParent($this())), c0_mainBus))))));
c0_Grid.addConstraint(or(equal(joinRef(join(joinParent(joinParent($this())), c1_gateway)), join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_dn)), c0_DoorModule)), equal(joinRef(join(joinParent(joinParent($this())), c1_gateway)), join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_dn)), c0_Switch))));
c0_Grid.addConstraint(equal(joinRef(join(join(joinRef(join(joinRef(join(joinParent(joinParent($this())), c1_ht)), c0_ct)), c0_logicalDoorBus), c0_gateway)), joinRef(join(joinParent(joinParent($this())), c1_gateway))));
c0_Grid.addConstraint(implies(some(join(joinParent(joinParent($this())), c0_doorBus)), equal(joinRef(join(join(joinParent(joinParent($this())), c0_doorBus), c2_length)), constant(70))));
c0_DriverWinSys.addConstraint(equal(joinRef(join($this(), c0_totalMass)), joinRef(join(join(join($this(), c0_DWinSysArch), c0_DWinSysHT), c1_totalMass))));
c0_DriverWinSys.addConstraint(equal(joinRef(join($this(), c0_totalCost)), joinRef(join(join(join($this(), c0_DWinSysArch), c0_DWinSysHT), c1_totalCost))));
c0_DriverWinSys.addConstraint(equal(joinRef(join($this(), c0_totalWarrantyCost)), joinRef(join(join(join($this(), c0_DWinSysArch), c0_DWinSysHT), c1_totalWarrantyCost))));
c0_manualUpDown.addConstraint(ifThenElse(some(global(c0_BasicOpLatency)), equal(joinRef(join($this(), c0_latencyReq)), joinRef(global(c0_BasicOpLatency))), none(join($this(), c0_latencyReq))));
c0_express.addConstraint(none(join($this(), c0_latencyReq)));
c0_expressUp.addConstraint(ifThenElse(some(global(c0_ExpressUpLatency)), equal(joinRef(join($this(), c0_latencyReq)), joinRef(global(c0_ExpressUpLatency))), none(join($this(), c0_latencyReq))));
c0_DWinSysFA.addConstraint(ifOnlyIf(some(join(join(join(joinParent(joinParent($this())), c0_DWinSysFM), c0_express), c0_expressUp)), some(join($this(), c0_PinchDetectionFA))));
c0_DWinSysFA.addConstraint(implies(some(join(join(join(joinParent(joinParent($this())), c0_DWinSysFM), c0_manualUpDown), c0_latencyReq)), lessThanEqual(add(add(add(add(add(add(add(joinRef(join(join($this(), c0_WinSwitch), c1_latencyReq)), joinRef(join(join($this(), c0_localWinReq), c2_latencyReq))), joinRef(join(join($this(), c0_WinArbiter), c1_latencyReq))), joinRef(join(join($this(), c0_winReq), c2_latencyReq))), joinRef(join(join($this(), c0_WinController), c1_latencyReq))), joinRef(join(join($this(), c0_winCmd), c2_latencyReq))), joinRef(join(join($this(), c0_WinMotorDrive), c1_latencyReq))), joinRef(join(join($this(), c0_WinMotor), c1_latencyReq))), joinRef(join(join(join(joinParent(joinParent($this())), c0_DWinSysFM), c0_manualUpDown), c0_latencyReq)))));
c0_DWinSysFA.addConstraint(implies(and(some(join($this(), c0_PinchDetectionFA)), some(join(join(join(join(joinParent(joinParent($this())), c0_DWinSysFM), c0_express), c0_expressUp), c0_latencyReq))), lessThanEqual(add(add(add(add(add(add(add(joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_PositionSensor), c1_latencyReq)), joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_position), c2_latencyReq))), joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_PinchDetection), c1_latencyReq))), joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_object), c2_latencyReq))), joinRef(join(join($this(), c0_WinController), c1_latencyReq))), joinRef(join(join($this(), c0_winCmd), c2_latencyReq))), joinRef(join(join($this(), c0_WinMotorDrive), c1_latencyReq))), joinRef(join(join($this(), c0_WinMotor), c1_latencyReq))), joinRef(join(join(join(join(joinParent(joinParent($this())), c0_DWinSysFM), c0_express), c0_expressUp), c0_latencyReq)))));
c0_DWinSysHT.addConstraint(equal(joinRef(join($this(), c0_dn)), join($this(), c0_DWinSysDN)));
c0_DWinSysHT.addConstraint(equal(joinRef(join($this(), c0_pt)), join($this(), c0_DWinSysPT)));
c0_DWinSysHT.addConstraint(equal(joinRef(join($this(), c0_ct)), join($this(), c0_DWinSysCT)));
c0_DWinSysHT.addConstraint(equal(joinRef(join($this(), c1_totalMass)), add(add(joinRef(join(join($this(), c0_DWinSysDN), c2_totalMass)), joinRef(join(join($this(), c0_DWinSysPT), c4_totalMass))), joinRef(join(join($this(), c0_DWinSysCT), c3_totalMass)))));
c0_DWinSysHT.addConstraint(equal(joinRef(join($this(), c1_totalCost)), joinRef(join(join($this(), c0_DWinSysDN), c2_totalCost))));
c0_DWinSysHT.addConstraint(equal(joinRef(join($this(), c1_totalWarrantyCost)), joinRef(join(join($this(), c0_DWinSysDN), c2_totalWarrantyCost))));
c0_DWinSysDN.addConstraint(equal(joinRef(join($this(), c0_BCM)), join(global(c0_Car), c1_BCM)));
c0_DWinSysDN.addConstraint(equal(joinRef(join($this(), c0_EC)), join(global(c0_Car), c1_EC)));
c0_DWinSysDN.addConstraint(equal(joinRef(join(join($this(), c0_Switch), c0_numSwitches)), constant(2)));
c0_DWinSysDN.addConstraint(equal(joinRef(join($this(), c2_totalMass)), add(add(add(joinRef(join(join($this(), c0_Switch), c0_mass)), joinRef(join(join($this(), c0_Motor), c0_mass))), joinRef(join(join($this(), c0_DoorInline), c0_mass))), joinRef(join(join($this(), c0_DoorModule), c0_mass)))));
c0_DWinSysDN.addConstraint(equal(joinRef(join($this(), c2_totalCost)), add(add(add(joinRef(join(join($this(), c0_Switch), c0_cost)), joinRef(join(join($this(), c0_Motor), c0_cost))), joinRef(join(join($this(), c0_DoorInline), c0_cost))), joinRef(join(join($this(), c0_DoorModule), c0_cost)))));
c0_DWinSysDN.addConstraint(equal(joinRef(join($this(), c2_totalWarrantyCost)), add(add(add(joinRef(join(join($this(), c0_Switch), c0_warrantyCost)), joinRef(join(join($this(), c0_Motor), c0_warrantyCost))), joinRef(join(join($this(), c0_DoorInline), c0_warrantyCost))), joinRef(join(join($this(), c0_DoorModule), c0_warrantyCost)))));
c0_DWinSysPT.addConstraint(equal(joinRef(join($this(), c0_inlineECDist)), constant(40)));
c0_DWinSysPT.addConstraint(equal(joinRef(join($this(), c0_inlineBCMDist)), constant(40)));
c0_DWinSysPT.addConstraint(equal(joinRef(join($this(), c4_totalMass)), add(add(add(joinRef(join(join($this(), c0_MotorLoadPowerWire), c1_mass)), joinRef(join(join($this(), c0_switchInlineDP), c1_mass))), joinRef(join(join($this(), c0_motorInlineDP), c1_mass))), joinRef(join(join($this(), c0_inlineECDP), c1_mass)))));
c0_DWinSysCT.addConstraint(equal(joinRef(join($this(), c3_totalMass)), add(joinRef(join(join($this(), c0_logicalDoorBus), c1_mass)), joinRef(join(join($this(), c0_logicalSwitchMotorDisc), c1_mass)))));
c0_DWinSysDpl.addConstraint(equal(joinRef(join($this(), c0_fa)), join(joinParent($this()), c0_DWinSysFA)));
c0_DWinSysDpl.addConstraint(equal(joinRef(join($this(), c0_ht)), join(joinParent($this()), c0_DWinSysHT)));
c0_DWinSysImpl.addConstraint(equal(joinRef(join($this(), c0_ci)), join($this(), c0_DWinSysCI)));
c0_DWinSysCI.addConstraint(equal(joinRef(join($this(), c1_ht)), join(joinParent(joinParent($this())), c0_DWinSysHT)));
c0_DWinSysCI.addConstraint(equal(joinRef(join($this(), c0_mainBus)), join(global(c0_Car), c0_MainBus)));
c0_DWinSysCI.addConstraint(ifOnlyIf(some(join(join($this(), c0_BusTopology), c0_Flat)), some(join(join(global(c0_Car), c0_CommunicationTopology), c1_Flat))));
c0_DWinSysCI.addConstraint(ifOnlyIf(some(join(join($this(), c0_BusTopology), c0_Grid)), some(join(join(global(c0_Car), c0_CommunicationTopology), c1_Grid))));
c0_DWinSysCI.addConstraint(ifOnlyIf(some(join(join($this(), c0_BusTopology), c0_SuperGateway)), some(join(join(global(c0_Car), c0_CommunicationTopology), c1_SuperGateway))));
c0_DWinSysCI.addConstraint(equal(joinRef(join($this(), c1_inlineBCMDist)), constant(40)));
c0_PassengerWinSys.addConstraint(equal(joinRef(join($this(), c0_totalMass)), joinRef(join(join(join($this(), c0_PWinSysArch), c0_PWinSysHT), c1_totalMass))));
c0_PassengerWinSys.addConstraint(equal(joinRef(join($this(), c0_totalCost)), joinRef(join(join(join($this(), c0_PWinSysArch), c0_PWinSysHT), c1_totalCost))));
c0_PassengerWinSys.addConstraint(equal(joinRef(join($this(), c0_totalWarrantyCost)), joinRef(join(join(join($this(), c0_PWinSysArch), c0_PWinSysHT), c1_totalWarrantyCost))));
c0_PWinSysFM.addConstraint(implies(some(join($this(), c1_express)), some(join(join(global(c0_DriverWinSys), c0_DWinSysFM), c0_express))));
c0_PWinSysFM.addConstraint(implies(some(join(join($this(), c1_express), c1_expressUp)), some(join(join(join(global(c0_DriverWinSys), c0_DWinSysFM), c0_express), c0_expressUp))));
c1_manualUpDown.addConstraint(ifThenElse(some(global(c0_BasicOpLatency)), equal(joinRef(join($this(), c0_latencyReq)), joinRef(global(c0_BasicOpLatency))), none(join($this(), c0_latencyReq))));
c1_express.addConstraint(none(join($this(), c0_latencyReq)));
c1_expressUp.addConstraint(ifThenElse(some(global(c0_ExpressUpLatency)), equal(joinRef(join($this(), c0_latencyReq)), joinRef(global(c0_ExpressUpLatency))), none(join($this(), c0_latencyReq))));
c0_PWinSysFA.addConstraint(ifOnlyIf(some(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_express), c1_expressUp)), some(join($this(), c0_PinchDetectionFA))));
c0_PWinSysFA.addConstraint(implies(some(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_manualUpDown), c0_latencyReq)), lessThanEqual(add(add(add(add(add(add(add(joinRef(join(join($this(), c0_WinSwitch), c1_latencyReq)), joinRef(join(join($this(), c0_localWinReq), c2_latencyReq))), joinRef(join(join($this(), c0_WinArbiter), c1_latencyReq))), joinRef(join(join($this(), c0_winReq), c2_latencyReq))), joinRef(join(join($this(), c0_WinController), c1_latencyReq))), joinRef(join(join($this(), c0_winCmd), c2_latencyReq))), joinRef(join(join($this(), c0_WinMotorDrive), c1_latencyReq))), joinRef(join(join($this(), c0_WinMotor), c1_latencyReq))), joinRef(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_manualUpDown), c0_latencyReq)))));
c0_PWinSysFA.addConstraint(implies(some(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_manualUpDown), c0_latencyReq)), lessThanEqual(add(add(add(add(add(add(add(joinRef(join(join($this(), c0_DWinSwitch), c1_latencyReq)), joinRef(join(join($this(), c0_dWinReq), c2_latencyReq))), joinRef(join(join($this(), c0_WinArbiter), c1_latencyReq))), joinRef(join(join($this(), c0_winReq), c2_latencyReq))), joinRef(join(join($this(), c0_WinController), c1_latencyReq))), joinRef(join(join($this(), c0_winCmd), c2_latencyReq))), joinRef(join(join($this(), c0_WinMotorDrive), c1_latencyReq))), joinRef(join(join($this(), c0_WinMotor), c1_latencyReq))), joinRef(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_manualUpDown), c0_latencyReq)))));
c0_PWinSysFA.addConstraint(implies(and(some(join($this(), c0_PinchDetectionFA)), some(join(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_express), c1_expressUp), c0_latencyReq))), lessThanEqual(add(add(add(add(add(add(add(joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_PositionSensor), c1_latencyReq)), joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_position), c2_latencyReq))), joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_PinchDetection), c1_latencyReq))), joinRef(join(join(join($this(), c0_PinchDetectionFA), c0_object), c2_latencyReq))), joinRef(join(join($this(), c0_WinController), c1_latencyReq))), joinRef(join(join($this(), c0_winCmd), c2_latencyReq))), joinRef(join(join($this(), c0_WinMotorDrive), c1_latencyReq))), joinRef(join(join($this(), c0_WinMotor), c1_latencyReq))), joinRef(join(join(join(join(joinParent(joinParent($this())), c0_PWinSysFM), c1_express), c1_expressUp), c0_latencyReq)))));
c0_DWinSwitch.addConstraint(equal(joinRef(join($this(), c0_latency)), constant(10)));
c0_dWinReq.addConstraint(and(equal(joinRef(join($this(), c0_sender)), join(joinParent($this()), c0_DWinSwitch)), equal(joinRef(join($this(), c0_receiver)), join(joinParent($this()), c0_WinArbiter))));
c0_dWinReq.addConstraint(equal(joinRef(join($this(), c0_size)), constant(1)));
c0_PWinSysHT.addConstraint(equal(joinRef(join($this(), c0_dn)), join($this(), c0_PWinSysDN)));
c0_PWinSysHT.addConstraint(equal(joinRef(join($this(), c0_pt)), join($this(), c0_PWinSysPT)));
c0_PWinSysHT.addConstraint(equal(joinRef(join($this(), c0_ct)), join($this(), c0_PWinSysCT)));
c0_PWinSysHT.addConstraint(equal(joinRef(join($this(), c1_totalMass)), add(add(joinRef(join(join($this(), c0_PWinSysDN), c2_totalMass)), joinRef(join(join($this(), c0_PWinSysPT), c4_totalMass))), joinRef(join(join($this(), c0_PWinSysCT), c3_totalMass)))));
c0_PWinSysHT.addConstraint(equal(joinRef(join($this(), c1_totalCost)), joinRef(join(join($this(), c0_PWinSysDN), c2_totalCost))));
c0_PWinSysHT.addConstraint(equal(joinRef(join($this(), c1_totalWarrantyCost)), joinRef(join(join($this(), c0_PWinSysDN), c2_totalWarrantyCost))));
c0_PWinSysDN.addConstraint(equal(joinRef(join($this(), c0_BCM)), join(global(c0_Car), c1_BCM)));
c0_PWinSysDN.addConstraint(equal(joinRef(join($this(), c0_EC)), join(global(c0_Car), c1_EC)));
c0_PWinSysDN.addConstraint(equal(joinRef(join(join($this(), c0_Switch), c0_numSwitches)), constant(1)));
c0_PWinSysDN.addConstraint(equal(joinRef(join($this(), c0_DSwitch)), join(join(join(join(global(c0_DriverWinSys), c0_DWinSysArch), c0_DWinSysHT), c0_DWinSysDN), c0_Switch)));
c0_PWinSysDN.addConstraint(equal(joinRef(join($this(), c2_totalMass)), add(add(add(joinRef(join(join($this(), c0_Switch), c0_mass)), joinRef(join(join($this(), c0_Motor), c0_mass))), joinRef(join(join($this(), c0_DoorInline), c0_mass))), joinRef(join(join($this(), c0_DoorModule), c0_mass)))));
c0_PWinSysDN.addConstraint(equal(joinRef(join($this(), c2_totalCost)), add(add(add(joinRef(join(join($this(), c0_Switch), c0_cost)), joinRef(join(join($this(), c0_Motor), c0_cost))), joinRef(join(join($this(), c0_DoorInline), c0_cost))), joinRef(join(join($this(), c0_DoorModule), c0_cost)))));
c0_PWinSysDN.addConstraint(equal(joinRef(join($this(), c2_totalWarrantyCost)), add(add(add(joinRef(join(join($this(), c0_Switch), c0_warrantyCost)), joinRef(join(join($this(), c0_Motor), c0_warrantyCost))), joinRef(join(join($this(), c0_DoorInline), c0_warrantyCost))), joinRef(join(join($this(), c0_DoorModule), c0_warrantyCost)))));
c0_PWinSysPT.addConstraint(equal(joinRef(join($this(), c0_inlineECDist)), constant(130)));
c0_PWinSysPT.addConstraint(equal(joinRef(join($this(), c0_inlineBCMDist)), constant(130)));
c0_PWinSysPT.addConstraint(equal(joinRef(join($this(), c4_totalMass)), add(add(add(joinRef(join(join($this(), c0_MotorLoadPowerWire), c1_mass)), joinRef(join(join($this(), c0_switchInlineDP), c1_mass))), joinRef(join(join($this(), c0_motorInlineDP), c1_mass))), joinRef(join(join($this(), c0_inlineECDP), c1_mass)))));
c0_PWinSysCT.addConstraint(equal(joinRef(join($this(), c3_totalMass)), add(add(add(joinRef(join(join($this(), c0_logicalDoorBus), c1_mass)), joinRef(join(join($this(), c0_logicalSwitchMotorDisc), c1_mass))), joinRef(join(join($this(), c0_logicalDriveSwitchPassMotor), c1_mass))), joinRef(join(join($this(), c0_logicalDriveSwitchPassSwitch), c1_mass)))));
c0_logicalDriveSwitchPassSwitch.addConstraint(equal(joinRef(join($this(), c0_length)), constant(260)));
c0_logicalDriveSwitchPassMotor.addConstraint(equal(joinRef(join($this(), c0_length)), constant(260)));
c0_PWinSysDpl.addConstraint(equal(joinRef(join($this(), c0_fa)), join(joinParent($this()), c0_PWinSysFA)));
c0_PWinSysDpl.addConstraint(equal(joinRef(join($this(), c0_ht)), join(joinParent($this()), c0_PWinSysHT)));
c0_PWinSysDpl.addConstraint(equal(joinRef(join(join(join(joinParent($this()), c0_PWinSysFA), c0_DWinSwitch), c0_deployedTo)), joinRef(join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysDN), c0_DSwitch))));
c0_PWinSysDpl.addConstraint(implies(some(join(join(join(joinParent($this()), c0_PWinSysFA), c0_dWinReq), c1_deployedTo)), $in(joinRef(join(join(join(joinParent($this()), c0_PWinSysFA), c0_dWinReq), c1_deployedTo)), union(union(join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysCT), c0_logicalDoorBus), join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysCT), c0_logicalDriveSwitchPassSwitch)), join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysCT), c0_logicalDriveSwitchPassMotor)))));
c0_PWinSysDpl.addConstraint(implies(equal(joinRef(join(join(join(joinParent($this()), c0_PWinSysFA), c0_dWinReq), c1_deployedTo)), join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysCT), c0_logicalDriveSwitchPassSwitch)), equal(joinRef(join(join(join(joinParent($this()), c0_PWinSysFA), c0_WinArbiter), c0_deployedTo)), join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysDN), c0_Switch))));
c0_PWinSysDpl.addConstraint(implies(equal(joinRef(join(join(join(joinParent($this()), c0_PWinSysFA), c0_dWinReq), c1_deployedTo)), join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysCT), c0_logicalDriveSwitchPassMotor)), equal(joinRef(join(join(join(joinParent($this()), c0_PWinSysFA), c0_WinArbiter), c0_deployedTo)), join(join(join(joinParent($this()), c0_PWinSysHT), c0_PWinSysDN), c0_Motor))));
c0_PWinSysImpl.addConstraint(equal(joinRef(join($this(), c0_ci)), join($this(), c0_PWinSysCI)));
c0_PWinSysCI.addConstraint(equal(joinRef(join($this(), c1_ht)), join(joinParent(joinParent($this())), c0_PWinSysHT)));
c0_PWinSysCI.addConstraint(equal(joinRef(join($this(), c0_mainBus)), join(global(c0_Car), c0_MainBus)));
c0_PWinSysCI.addConstraint(ifOnlyIf(some(join(join($this(), c0_BusTopology), c0_Flat)), some(join(join(global(c0_Car), c0_CommunicationTopology), c1_Flat))));
c0_PWinSysCI.addConstraint(ifOnlyIf(some(join(join($this(), c0_BusTopology), c0_Grid)), some(join(join(global(c0_Car), c0_CommunicationTopology), c1_Grid))));
c0_PWinSysCI.addConstraint(ifOnlyIf(some(join(join($this(), c0_BusTopology), c0_SuperGateway)), some(join(join(global(c0_Car), c0_CommunicationTopology), c1_SuperGateway))));
c0_PWinSysCI.addConstraint(equal(joinRef(join($this(), c1_inlineBCMDist)), constant(130)));
c1_BCM.addConstraint(some(join(join($this(), c0_type), c0_smart)));
c1_BCM.addConstraint(equal(joinRef(join($this(), c0_mass)), constant(10)));
c1_BCM.addConstraint(equal(joinRef(join($this(), c0_cost)), constant(46)));
c1_BCM.addConstraint(equal(joinRef(join($this(), c0_reliability)), constant(2)));
c1_BCM.addConstraint(equal(joinRef(join($this(), c0_replaceCost)), constant(46)));
c1_BCM.addConstraint(equal(joinRef(join($this(), c0_gatewayLatency)), constant(3)));
c1_BCM.addConstraint(equal(joinRef(join(join(join($this(), c0_type), c0_smart), c0_speedFactor)), constant(5)));
c1_EC.addConstraint(some(join(join($this(), c0_type), c0_power)));
c1_EC.addConstraint(equal(joinRef(join($this(), c0_mass)), constant(30)));
c1_EC.addConstraint(equal(joinRef(join($this(), c0_cost)), constant(0)));
c1_EC.addConstraint(equal(joinRef(join($this(), c0_reliability)), constant(10)));
c1_EC.addConstraint(equal(joinRef(join($this(), c0_replaceCost)), constant(0)));
c1_Flat.addConstraint(implies(some(join(joinParent(joinParent($this())), c0_MainBus)), equal(joinRef(join(join(joinParent(joinParent($this())), c0_MainBus), c2_length)), constant(310))));
c1_Grid.addConstraint(implies(some(join(joinParent(joinParent($this())), c0_MainBus)), equal(joinRef(join(join(joinParent(joinParent($this())), c0_MainBus), c2_length)), constant(170))));
c1_SuperGateway.addConstraint(none(join(joinParent(joinParent($this())), c0_MainBus)));
